I"x|<ul>
  <li><a href="#%e8%af%8d%e6%b3%95%e5%88%86%e6%9e%90%e5%99%a8">词法分析器</a>
    <ul>
      <li><a href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e8%a6%81%e6%9c%89%e8%af%8d%e6%b3%95%e5%88%86%e6%9e%90%e5%99%a8">为什么要有词法分析器</a></li>
      <li><a href="#%e5%a6%82%e4%bd%95%e6%9e%84%e5%bb%ba%e4%b8%80%e4%b8%aa%e8%af%8d%e6%b3%95%e5%88%86%e6%9e%90%e5%99%a8">如何构建一个词法分析器</a></li>
    </ul>
  </li>
  <li><a href="#%e8%af%ad%e6%b3%95%e5%88%86%e6%9e%90%e5%99%a8">语法分析器</a>
    <ul>
      <li><a href="#%e8%af%ad%e6%b3%95%e5%88%86%e6%9e%90%e5%99%a8%e7%9a%84%e5%9f%ba%e6%9c%ac%e9%97%ae%e9%a2%98">语法分析器的基本问题</a></li>
      <li><a href="#%e5%b8%82%e9%9d%a2%e4%b8%8a%e7%9a%84%e5%b8%b8%e8%a7%81parser">市面上的常见Parser</a></li>
      <li><a href="#%e9%80%92%e5%bd%92%e5%90%91%e4%b8%8b%e8%a7%a3%e6%9e%90%e5%99%a8">递归向下解析器</a></li>
      <li><a href="#parser-combinator">Parser Combinator</a></li>
      <li><a href="#parser-generator">Parser Generator</a></li>
      <li><a href="#%e7%ae%97%e7%ac%a6%e4%bc%98%e5%85%88%e7%ba%a7%e8%a7%a3%e6%9e%90%e5%99%a8">算符优先级解析器</a></li>
    </ul>
  </li>
  <li><a href="#%e4%bb%8e%e8%a7%a3%e6%9e%90%e6%a0%91%e5%88%b0%e8%af%ad%e6%b3%95%e6%a0%91">从解析树到语法树</a>
    <ul>
      <li><a href="#%e9%80%92%e5%bd%92%e5%90%91%e4%b8%8b%e8%a7%a3%e6%9e%90%e5%99%a8%e7%9a%84%e6%83%85%e5%86%b5">递归向下解析器的情况</a></li>
      <li><a href="#yacc%e7%9a%84%e6%83%85%e5%86%b5">Yacc的情况</a></li>
    </ul>
  </li>
  <li><a href="#%e9%9c%80%e8%a6%81%e6%b3%a8%e6%84%8f%e7%9a%84%e5%87%a0%e4%b8%aa%e9%97%ae%e9%a2%98">需要注意的几个问题</a>
    <ul>
      <li><a href="#%e4%b8%8d%e8%a6%81%e7%bb%99parser%e5%a2%9e%e5%8a%a0%e5%a4%aa%e5%a4%9a%e8%b4%9f%e6%8b%85">不要给Parser增加太多负担</a></li>
      <li><a href="#%e6%9c%80%e5%a5%bd%e4%b8%8d%e8%a6%81%e5%ae%9e%e7%8e%b0parser">最好不要实现Parser</a></li>
    </ul>
  </li>
</ul>

<h2 id="词法分析器">词法分析器</h2>

<p>词法分析器，是将输入的字符串解析为符号串的工具；语法分析器，即parser，是将符号串解析为解析树（并将解析树映射为语法树）的工具。</p>

<h3 id="为什么要有词法分析器">为什么要有词法分析器</h3>

<p>一般的编译器教科书，常常是先讲词法分析器，再讲语法分析器，顺带着讲讲生成文法。个人认为这是<strong>完全错误</strong>的。</p>

<p>我们必须要知道，我们这里提到的Parser解析的全部都是<strong>上下文无关文法</strong>（CFG），而词法分析器解析的是<strong>正则文法</strong>，我们还知道，<strong>所有的正则文法都是上下文无关文法</strong>，那么这就得出一个结论，因为Parser也可以解析正则文法，所以词法分析起是完全不需要的。</p>

<p>为了解释为什么需要词法分析器，我们必须考察一下市面上常见的各种Parser。</p>

<p>Parser从大的方面上分，有三个属性：</p>

<ul>
  <li>定向/非定向</li>
  <li>确定型/非确定型</li>
  <li>自底向上/自顶向下</li>
</ul>

<p>其中非定向方法构建的Parser在程序语言中用的不多，这里不表。</p>

<p>如果你认真阅读过关于上一篇正则文法的文章，你会知道“确定型”和“非确定型”的区别在于“确定型”不需要搜索，时间复杂度是线性的；“非确定型”需要搜索，时间复杂度按你搜索的方法不同，从\(O(n^2)\)到\((O(e^n))\)都有可能。如果从这个角度出发，那么这个解析器最好是确定型的。</p>

<p>但凡事有得必有失，确定型的解析器有一个天然劣势–<strong>不存在可以解析任何CFG的确定型解析器</strong>。这就要求我们必须对文法进行限制，以满足特定的解析器。</p>

<p>这种限制有时候是很不舒服的。而正则文法则不同，<strong>只要你的文法是正则文法，不需任何限制即可获得一个确定型解析器</strong>。</p>

<p>所以我们需要正则文法，来将字符串变为符号串，提前解决一些Parser解析起来很麻烦的东西。</p>

<h3 id="如何构建一个词法分析器">如何构建一个词法分析器</h3>

<p>如果你使用的语言有正则表达式支持，那就直接使用正则表达式构建即可；如果没有（常用的语言也就C没有了吧），建议使用flex之类的工具。</p>

<p>这里我们需要注意几个问题：</p>

<ul>
  <li>正则表达式最好写在一起，否则和搜索没有区别。</li>
  <li>如果你的正则表达式不支持捕获，那么是无法实现的。</li>
  <li>注意错误处理，生成好看的错误。</li>
</ul>

<h2 id="语法分析器">语法分析器</h2>

<h3 id="语法分析器的基本问题">语法分析器的基本问题</h3>

<p>我个人分为三个问题：</p>

<ul>
  <li>如何正确、快速地识别输入符号串</li>
  <li>如何构建的解析树</li>
  <li>如何把解析树映射成语法树</li>
</ul>

<p>接下来的讨论，只讨论第一个问题。后面两个问题见下一节。</p>

<h3 id="市面上的常见parser">市面上的常见Parser</h3>

<p>现在市面上有很多Parser，大概分为五类：</p>

<ul>
  <li>手写的递归向下解析器</li>
  <li>函数式编程语言里的Parser Combinator</li>
  <li>Parser Generator</li>
  <li>手写的算符优先级解析器</li>
  <li>一些使用特定算法的其他解析器</li>
</ul>

<h3 id="递归向下解析器">递归向下解析器</h3>

<p>递归向下指的是一种编程方法。比如说你有这样的文法：</p>

\[A \rightarrow aBc\]

\[B \rightarrow dB\]

<p>那么，你写出这种函数：</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">VALUE</span> <span class="nf">handle_A</span><span class="p">(</span><span class="n">SYMBOL</span> <span class="o">*</span> <span class="n">stream</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="n">stream</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span> <span class="o">==</span> <span class="n">a</span><span class="p">){</span>
    <span class="n">pos</span><span class="o">++</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">SUCCESS</span><span class="p">(</span><span class="n">handle_B</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="n">pos</span><span class="p">))){</span>
      <span class="k">if</span><span class="p">(</span><span class="n">stream</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span> <span class="o">==</span> <span class="n">c</span><span class="p">){</span>
        <span class="n">pos</span><span class="o">++</span><span class="p">;</span>
        <span class="c1">// 变成语法树返回回去</span>
      <span class="p">}</span>
      <span class="k">else</span><span class="p">{</span>
        <span class="c1">// error_handle</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">else</span><span class="p">{</span>
      <span class="c1">// error_handle</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">else</span><span class="p">{</span>
    <span class="c1">// error_handle</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="n">VALUE</span> <span class="nf">handle_B</span><span class="p">(</span><span class="n">SYMBOL</span> <span class="o">*</span> <span class="n">stream</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="n">stream</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span> <span class="o">==</span> <span class="n">d</span><span class="p">){</span>
    <span class="n">pos</span><span class="o">++</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">SUCCESS</span><span class="p">(</span><span class="n">handle_B</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="n">pos</span><span class="p">))){</span>
      <span class="c1">// 变成语法树返回回去</span>
    <span class="p">}</span>
    <span class="k">else</span><span class="p">{</span>
      <span class="c1">// error_handle</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">else</span><span class="p">{</span>
    <span class="c1">// error_handle</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>从外形上说，这就是把每一个非终结符写成一个函数，然后在这个函数里处理这个非终结符的内容，并返回成功或失败。</p>

<p>从本质上说，这是一个自顶向下解析器。它是一个下推自动机，具有一个栈，以如下方式运行：</p>

<ul>
  <li>初始化：将初始符号压入栈中（调用handle_S）</li>
  <li>从栈顶弹出一个符号
    <ul>
      <li>如果是终结符就与当前字符串的第一个符号进行比较，如果成功则继续，失败返回错误</li>
      <li>如果是非终结符就将这个非终结符的右手侧压入栈中（调用handle_X）</li>
    </ul>
  </li>
</ul>

<p>这个时候，读者应该隐隐约约地感到到了一些问题。</p>

<p>第一个问题是，一个非终结符可以生成不同的符号串，比如说：</p>

\[A \rightarrow aBc \tag{0}\]

\[A \rightarrow cDf \tag{1}\]

<p>如果现在的栈顶符号是\(A\)，你如何判断压入哪个符号串呢？</p>

<p>这就有了递归向下Parser内部的两个实质Parser：</p>

<ul>
  <li>回退解析器。如果遇到这种问题，我们使用搜索广度优先或深度优先搜索算法，将两种路径都尝试一下，如果失败就回退。（非确定型）</li>
  <li>LL(k)解析器。我们保证文法是LL(k)的，这样一来就可以根据当前输入符号串的前\(k\)个符号判断采取哪条路径。（确定型）</li>
</ul>

<p>第二个问题是，如果我们遇到的是左递归文法：</p>

\[A \Rightarrow Aa\]

<p>这个规则会使得自动机不停地弹出A和压入A，是一个死循环。所以从本质上来说，执行最左推导的下推自动机极其实现，永远不可能处理原始的左递归文法。</p>

<p>而有时候我们又必须要求左递归，比如四则运算的减号。</p>

<p>有人可能会说，有一个算法可以把左递归强行化成右递归。确实是有，但是如果你把该算法作用于减号上，你会发现，强行化成右递归会导致语义不正确。这个问题是每一个使用递归向下的人不得不解决的。</p>

<h3 id="parser-combinator">Parser Combinator</h3>

<p>我们知道，所有的生成文法其实都可以写成连接的形式（当然，必须允许重复定义，或者允许选择符号）。而上面的递归向下解析器其实是在用代码定义这些东西：</p>

<ul>
  <li>终结符–是否匹配的if判断语句</li>
  <li>非终结符–是否匹配的if判断函数</li>
  <li>连接–顺序执行</li>
  <li>选择–判断进入哪条路径的if判断语句</li>
</ul>

<p>很多人会敏锐的认识到，这些东西都可以进行抽象。把代码的运行逻辑留下，作为一个高阶函数；把具体的代码封装成函数作为其参数。而这恰恰就是函数式编程的思想。</p>

<p>如此一来，我们就获得了一个新的工具–Parser Combinator.</p>

<p>我这里举<a href="https://www.quanttec.com/fparsec/">FParsec</a>作为例子，看看它是如何构建解析器的：</p>

<p>FParsec把输入流进行封装。其中最重要的概念就是“position”，即当前要处理的符号串位置。<strong>这里需要特别注意，FParsec只支持将字符串作为输入，无法使用词法分析器，这是其美中不足之处。</strong></p>

<p>FParsec将解析器定义为一个函数，原型如下：</p>

<pre><code class="language-f#">  type Parser&lt;'Result, 'UserState&gt; = CharStream&lt;'UserState&gt; -&gt; Reply&lt;'Result&gt;
</code></pre>

<p>这里的UserState是我们自己定义的State，一般设为unit（即空类型，没有内容）即可，暂时不去管他；这里的’Result是一个泛型类型，用户可以自己定义结果。</p>

<p>这个函数的意义是，一个输入为CharStream型，输出为Reply的函数。</p>

<p>FParsec提供了一些用来从字符构建非终结符的函数，比如说:</p>

<pre><code class="language-f#">  let internal charReturnE (c: char) result error : Parser&lt;'a,'u&gt; =
    fun stream -&gt;
        if stream.Skip(c) then Reply(result)
        else Reply(Error, error)
</code></pre>

<p>我们使用</p>

<pre><code class="language-f#">  let a =  charReturnE "a" "a"
</code></pre>

<p>即是定义了非终结符a，对应的字符也是”a”。</p>

<p>FParsec提供了一系列用于连接符号的函数。</p>

<pre><code class="language-f#">  let (.&gt;&gt;) (p: Parser&lt;'a,'u&gt;) (q: Parser&lt;'b,'u&gt;) =
    fun stream -&gt;
        let mutable reply1 = p stream
        if reply1.Status = Ok then
            let stateTag1 = stream.StateTag
            let reply2 = q stream
            let error = if isNull reply1.Error then reply2.Error
                        elif stateTag1 &lt;&gt; stream.StateTag then reply2.Error
                        else mergeErrors reply2.Error reply1.Error
            reply1.Error  &lt;- error
            reply1.Status &lt;- reply2.Status
        reply1
</code></pre>

<p>这个符号是将两个非终结符连接起来，形成一个新的非终结符的函数。
  比如说：</p>

<pre><code class="language-f#">  let A = charReturnE "a" "a"
  let B = charReturnE "a" "a"
  let C = A .&gt;&gt; B
</code></pre>

<p>实际上就是：</p>

\[A \rightarrow a\]

\[B \rightarrow b\]

\[C \rightarrow AB\]

<p>的实现。</p>

<p>FParsec本质上是一个回退解析器，但它的性能却相当不错。这是因为它对选择符号(&lt;|&gt;)的实现：</p>

<pre><code class="language-f#">  let (&lt;|&gt;) (p1: Parser&lt;'a,'u&gt;) (p2: Parser&lt;'a,'u&gt;) : Parser&lt;'a,'u&gt; =
    fun stream -&gt;
        let mutable stateTag = stream.StateTag
        let mutable reply = p1 stream
        if reply.Status = Error &amp;&amp; stateTag = stream.StateTag then
            let error = reply.Error
            reply &lt;- p2 stream
            if stateTag = stream.StateTag then
                reply.Error &lt;- mergeErrors reply.Error error
        reply
</code></pre>

<p>我们看到，如果第一个Parser失败，<strong>当且仅当在stateTag没有改变时</strong>，才会进行用第二个Parser进行解析。</p>

<p>这个stateTag，实际上就是position，也就是是当前解析到的位置。如此设计，保证了这个Parser<strong>仅仅会回退一个字符</strong>，因为如果第一个字符是匹配的，position就发生了变化。如此设计，使得它在某种意义上具有了\(LL(1)\)的特性。</p>

<p>当然，我们也可以使用attempt强行使它回退。</p>

<p>针对下推自动机无法识别左递归的问题，FParsec引入了一个算符优先级解析器，帮助我们识别(1 + 1 - 2)一类的式子。</p>

<p>个人认为FParsec是一个不错的东西。但是F#和Haskell一样，本身语言设计有诸多麻烦之处，实际开发体验并没有特别舒服。</p>

<h3 id="parser-generator">Parser Generator</h3>

<p>这个东西应该是最为正统的方式了。Parser Generator可以做到由文法直接生成代码，我们不太需要关系内部是如何实现的。这个东西的集大成者是yacc，我们没什么好说的。</p>

<h3 id="算符优先级解析器">算符优先级解析器</h3>

<p>我们并不陌生，大名鼎鼎的调度场算法即是这类解析器的一种，这里也不耗费笔墨了。</p>

<h2 id="从解析树到语法树">从解析树到语法树</h2>

<p>解析树，顾名思义，就是解析器生成的树。这里有两个问题：</p>

<ul>
  <li>逻辑上的解析树是唯一的，也就是生成文法生成句子的那棵生成树。</li>
  <li>一个可以正确识别出输出符号串的解析器，一定是正确地构建出解析树了的，但是这颗解析树是逻辑上的，而非实现上的。实现上的解析树是什么样的，需要一一讨论。</li>
</ul>

<p>语法树则不同，语法树和解析树的关系是若即若离的：</p>

<ul>
  <li>语法树的节点并不是解析器自动生成的，而是人为设计的。</li>
  <li>即使没有Parser，我们也可以直接根据想法（<strong>而不是根据生成文法</strong>），构建出语法树。</li>
  <li>一般来说，我们的Parser会在解析的同时，将解析时映射为语法树。</li>
</ul>

<p>我们考察两个有代表性的解析器–递归向下解析器与Yacc生成的解析器–是如何构建出解析树，并将其映射为语法树的。</p>

<h3 id="递归向下解析器的情况">递归向下解析器的情况</h3>

<p>以如下文法为例：</p>

\[S \rightarrow A\]

\[A \rightarrow M\]

\[A \rightarrow M + A\]

\[M \rightarrow D * M\]

\[M \rightarrow D\]

\[D \rightarrow int | (A)\]

<p>这文法定义了一个支持加乘两种运算的式子。</p>

<p>我们用C#实现一下；</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">namespace</span> <span class="nn">RecursiveDesentParser</span>
<span class="p">{</span>
    <span class="k">class</span> <span class="nc">Parser</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Target</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">private</span> <span class="kt">int</span> <span class="n">pointer</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
        <span class="k">private</span> <span class="n">Node</span> <span class="n">head</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Node</span><span class="p">(</span><span class="s">"S"</span><span class="p">);</span>
        <span class="k">public</span> <span class="nf">Parser</span><span class="p">(</span><span class="kt">string</span> <span class="n">s</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Target</span> <span class="p">=</span> <span class="n">s</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="kt">bool</span> <span class="nf">Parse</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">success</span> <span class="p">=</span> <span class="p">(</span><span class="n">head</span> <span class="p">=</span> <span class="nf">ParseA</span><span class="p">())</span> <span class="p">!=</span> <span class="k">null</span><span class="p">;</span>
            <span class="k">return</span> <span class="nf">ParseEpsilon</span><span class="p">()</span> <span class="p">&amp;&amp;</span> <span class="n">success</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">private</span> <span class="n">Node</span> <span class="nf">ParseA</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">Node</span> <span class="n">now</span> <span class="p">=</span> <span class="nf">ParseM</span><span class="p">();</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">now</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nf">ParseChar</span><span class="p">(</span><span class="sc">'+'</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="n">List</span><span class="p">&lt;</span><span class="n">Node</span><span class="p">&gt;</span> <span class="n">nodes</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Node</span><span class="p">&gt;();</span>
                    <span class="n">nodes</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">now</span><span class="p">);</span>
                    <span class="kt">var</span> <span class="n">tail</span> <span class="p">=</span> <span class="nf">ParseA</span><span class="p">();</span>
                    <span class="n">nodes</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">tail</span><span class="p">);</span>
                    <span class="k">return</span> <span class="k">new</span> <span class="nf">Node</span><span class="p">(</span><span class="s">"+"</span><span class="p">,</span> <span class="n">nodes</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="n">now</span><span class="p">;</span> <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="k">null</span><span class="p">;</span> <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">private</span> <span class="n">Node</span> <span class="nf">ParseM</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">Node</span> <span class="n">now</span> <span class="p">=</span> <span class="nf">ParseD</span><span class="p">();</span>
            <span class="k">if</span><span class="p">(</span><span class="n">now</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nf">ParseChar</span><span class="p">(</span><span class="sc">'*'</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="n">List</span><span class="p">&lt;</span><span class="n">Node</span><span class="p">&gt;</span> <span class="n">nodes</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Node</span><span class="p">&gt;();</span>
                    <span class="n">nodes</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">now</span><span class="p">);</span>
                    <span class="kt">var</span> <span class="n">tail</span> <span class="p">=</span> <span class="nf">ParseM</span><span class="p">();</span>
                    <span class="n">nodes</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">tail</span><span class="p">);</span>
                    <span class="k">return</span> <span class="k">new</span> <span class="nf">Node</span><span class="p">(</span><span class="s">"*"</span><span class="p">,</span> <span class="n">nodes</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="n">now</span><span class="p">;</span> <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="k">null</span><span class="p">;</span> <span class="p">}</span>
        <span class="p">}</span>
        <span class="c1">// 以下代码略</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>现在来解析这样的式子:</p>

\[1 + 2 * 3\]

<p>为了更好地展示解析的过程，我们需要把整个解析的所有调用都画出来：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ParseA
  ParseM
    ParseD : 1
  ParseChar : +
  ParseA
    ParseM
      ParseD : 2
      ParseChar : <span class="k">*</span>
      ParseM
        ParseD : 3
</code></pre></div></div>

<p>我们发现：<strong>调用函数的过程，自然地形成了一颗解析树！</strong>，这也正是递归向下解析器的一大特性。</p>

<p>调用函数的过程本身就是解析树，将解析树映射为语法树的做法就呼之欲出了：将返回值作为语法树的节点，在每个函数内部实现解析树到语法树的节点的映射：</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="n">Node</span> <span class="nf">ParseA</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Node</span> <span class="n">now</span> <span class="p">=</span> <span class="nf">ParseM</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">now</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nf">ParseChar</span><span class="p">(</span><span class="sc">'+'</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="n">List</span><span class="p">&lt;</span><span class="n">Node</span><span class="p">&gt;</span> <span class="n">nodes</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Node</span><span class="p">&gt;();</span>
            <span class="n">nodes</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">now</span><span class="p">);</span>
            <span class="kt">var</span> <span class="n">tail</span> <span class="p">=</span> <span class="nf">ParseA</span><span class="p">();</span>
            <span class="n">nodes</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">tail</span><span class="p">);</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">Node</span><span class="p">(</span><span class="s">"+"</span><span class="p">,</span> <span class="n">nodes</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="n">now</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="k">null</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>在这个函数里，我们把自然形成的这个解析树：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A
  M
  +
  A
</code></pre></div></div>

<p>映射成了这样的语法树：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>+
  M
  A
</code></pre></div></div>

<h3 id="yacc的情况">Yacc的情况</h3>

<p>yacc是一个LALR(1)文法的Parser Generator. 它产生的分析器是一个自底向上的确定型分析器。</p>

<p>自底向上的意思是，它对应一个这样的自动机：</p>

<p>（在下面的示意中, .表示在.之前的位置已经被分析完了）</p>

<p>这个自动机的输入是一个字符串，它开始的状态是当然是:</p>

\[.a_{0}a_{1}a_{2}a_{3}\]

<p>这个自动机还具有一个栈，在开始状态，栈中没有元素。</p>

\[S\]

<p>这个自动机有两种操作：</p>

<ul>
  <li>读入一个字符，把字符放到栈里。</li>
  <li>把栈里的字符进行规约，化成别的符号。</li>
</ul>

<p>它不断地进行这两个操作，直至栈中得到开始符号为止。</p>

<p>以下面的语法和输入字符为例：</p>

\[S \Rightarrow A\]

\[A \rightarrow Aa | a\]

\[aaaa\]

<p>首先，开始的状态是：</p>

\[栈：\]

\[.aaaa\]

<p>移进一个a：</p>

\[栈：a\]

\[a.aaa\]

<p>进行规约：</p>

\[栈：A\]

\[a.aaa\]

<p>再移入一个a：</p>

\[栈：Aa\]

\[aa.aa\]

<p>下面的操作就无需多言了。</p>

<p>这里我们会发现，自底向上的解析器的解析树，实际上体现在“规约”中，<strong>每一次的规约，实际上是以解析树的叶子节点替换解析树的根节点</strong>。</p>

<p>但这样一来，真正的解析树其实没有被留下，也就无法把解析树映射为语法树了。</p>

<p>为了解决这个问题，yacc引入了一个“内容栈”和“符号栈”的概念。</p>

<ul>
  <li>内容栈：栈里是类型为YYSTYPE的值，它是保存结果用的栈。</li>
  <li>符号栈：我们刚才说得用来分析的栈。</li>
</ul>

<p>这两个栈到底是怎么一回事呢？我们来看一个例子：</p>

<pre><code class="language-yacc">
%{
#include &lt;stdio.h&gt;
 typedef struct node
 {
 struct node *left;
 struct node *right;
 char *token;
 } node;
 node *mknode(node *left, node *right, char *token);
 void printtree(node *tree);
#define YYSTYPE struct node *
%} 

exp : term {$$ = $1;}
 | exp PLUS term {$$ = mknode($1, $3, "+");}
 | exp MINUS term {$$ = mknode($1, $3, "-");} 
</code></pre>

<p>不难看出，node是语法树的节点类型，而那句</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="cp">#define YYSTYPE struct node *
</span>
</code></pre></div></div>

<p>就是将内容栈的元素类型定义为node*指针类型。</p>

<p>下面的那句</p>

<pre><code class="language-yacc">
exp : term {$$ = $1;}
 | exp PLUS term {$$ = mknode($1, $3, "+");}
 | exp MINUS term {$$ = mknode($1, $3, "-");} 

</code></pre>

<p>如果除去大括号，就是生成文法；而大括号里面的内容，则是对每条文法在<strong>内容栈</strong>上的操作，这个写法表示，在运用这条文法进行规约时，将内容栈上的对应元素拿出，并压入新构造的node*指针。</p>

<p>这样一来，我们又实现了从解析树映射到语法树的操作。</p>

<h2 id="需要注意的几个问题">需要注意的几个问题</h2>

<h3 id="不要给parser增加太多负担">不要给Parser增加太多负担</h3>

<p>有些人想要在解析阶段就识别出来这种语法错误：</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">char</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="n">a</span><span class="p">();</span>
</code></pre></div></div>

<p>如果真的想做，这需要CSG解析。而CSG解析并没有一个很好的算法，所以，应该放弃这种不切实际的想法，在后面的阶段再检查这种错误。</p>

<h3 id="最好不要实现parser">最好不要实现Parser</h3>

<p>通过上面的描述，可以看到Parser是一个苦大仇深的行业。如果你实现一个复杂的语法，它的Parser会非常复杂，这会耗尽你对程序语言的热情。所以，让我们一起来实现Lisp吧！</p>
:ET